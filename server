#!/bin/bash

# default hostname
HOST=localhost
# default port number
PORT=8080
# script name
NAME=${0##*/}

usage () {
cat <<EOF

$NAME (PHP built-in web server manager) Version 0.1.0
PHP builtin server manager on port $PORT
 
usage: ./$NAME <command> [<hostname>:<port>]

Available commands:
  start     Starts PHP built-in web server server on specified hostname:port, default is localhost:$PORT  
  stop      Stops the PHP built-in web server
  restart   Stops and Starts on previously specified hostname:port


report bugs to me@cubny.com
$NAME homepage: <https://github.com/cubny/php-built-in-server-manager>

EOF
return 0
}


# if no command specified exit and show usage
if [[ $# < 1 ]]; then
  echo $NAME: no command specified
  usage
  exit 1
fi

# if hostname:port specified override defaults
if [[ $# > 1 ]]; then
  IFS=':' read -r -a hostport <<< "$2"
  if [[ ! -z "${hostport[0]}" ]]; then
    HOST=${hostport[0]}
  fi
  if [[ ! -z "${hostport[1]}" ]]; then
    PORT=${hostport[1]}
  fi
fi

# pidfile contents would be hostname:port:pid
PIDFILE="$NAME".pid
LOGFILE="$NAME".log


start_server () {
  if [[ -e "$PIDFILE" ]]; then
    echo Server seems to be running!
    echo 
    echo if not, there is probably a zombie "$PIDFILE" in this directory.
    echo if you are sure no server is running just remove "$PIDFILE" manually and start again
    return 1
  else
    echo "$NAME" started on $HOST:$PORT
    (php -S "$HOST":"$PORT" >> "$LOGFILE" 2>&1)&
    echo "$HOST":"$PORT":$! > $PIDFILE
    return 0
  fi
}

stop_server () {
  if [[ -e "$PIDFILE" ]]; then
    IFS=':' read -r -a hostportpid <<< `cat "$PIDFILE"` 
    PID=${hostportpid[2]}
    PORT=${hostportpid[1]}
    HOST=${hostportpid[0]}
    kill "$PID"
    rm "$PIDFILE"
    echo "$NAME" stopped!
    return 0
  else 
    echo "$NAME" is not running
    return 1
  fi
}


case $1 in
  start) start_server;;
  stop)  stop_server;;
  restart) stop_server && start_server ;;
  -h) usage ;;
  --help) usage ;;
  *) usage;;
esac

